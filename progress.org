* protoscript progress

* ----------------------- Dated notes ---------------------------
** <2013-09-01 Sun> Created this project
* ------------------------ TODO list ----------------------------
* Work on CGR code
** TODO Requirements for pypi package
*** DONE Create a separate repository for cgr_capture on github
    - Not really necessary, but this should be done at some point.
*** DONE Create a .pypirc file 
    - The username and password can be in there -- this won't go on
      github.  This goes in your home directory.
*** DONE Register at pypi
*** DONE Create a README.txt file
    - Write this in restructured text. Test the file with:
    - python setup.py --long-description | rst2html.py > output.html
** TODO Add support for averaging
   - Plot the resulting average after each acquisition.
   - averages is already a config parameter
** DONE cgrlib.set_ctrl_reg needs to take trigdict
*** Trigdict members
    1. trigsrc
    2. triglev
    3. trigpol
    4. trigpts
** DONE cgrlib.set_trig_samples needs to take trigdict
** DONE cgrlib.set_trig_level needs to take trigdict
   - Right now it takes the individual trigsrc and triglev
** DONE cgrlib.set_trig_samples needs to take trigdict
** DONE Move all settings to configuration file
** TODO Add support for internal trigger option
   - Internal trigger should force a trigger as often as is possible.
   - Still observe the trigpts setting, because who knows?
** TODO Make option to force trigger while waiting for trigger
   - This will require the curses module.  That will require some learning.
** DONE Pull out old testlib messages
   - These should be handled by the logger
** DONE Add list of serial ports not detected by comports
   - This will help with the cygwin situation
** TODO Create dummy connection
** DONE Get the control register setting into the library
** DONE Get the hardware gain setting into the library
** DONE Get the trigger level setting into the library
** DONE Use cgr_cal to determine what offsets should be
   - Run through a calibration sequence for each gain stage
** DONE In cgrcal, get_offsets should set values in the dictionary
** DONE Change name of make_cal_data to get_cal_data
** DONE Move get_cal_data into the library
** DONE Fix trigger function to use the caldict calibration
   - The set_trig_level function is just calibration in reverse.  Need
     to use the calibration coefficients to arrive at a number in
     counts from a floating-point voltage.  Also, make set_trig_level
     use gainlist instead of independent gains.
** DONE Modify cgr_capture to use the new library functions
** DONE Combine trigger settings into a dictionary
   - Trigger source, trigger samples, trigger level
   - This dictionary should get passed to the function that gets
     triggered data, so it can say something like: waiting for a 1V trigger on channel A.
** DONE Warn on actual sample frequency when different than requested
** DONE Make info message for what unit reports as end of capture location
** DONE Draw crosshairs at the trigger point
** DONE Get milliseconds out of logger time string
** DONE Move trigger level x3into a separate config file
** TODO Calibration coefficients should go in the configuration file
** DONE Switch configuration handling to configobj
   - http://www.voidspace.org.uk/python/configobj.html
** DONE Create acquisition configuration section
*** Sample rate setting
    - Note that the unit always acquires 1024 samples from each
      channel.  So the sample rate is tied to the acquisition time.  I
      like being able to set the sample rate though, so make this the
      setting.
*** Averages
    - Note that averaging doesn't make much sense without a trigger.
      That doesn't mean I won't do it.
